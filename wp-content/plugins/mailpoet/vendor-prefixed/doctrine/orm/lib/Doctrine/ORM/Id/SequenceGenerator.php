<?php
 declare (strict_types=1); namespace MailPoetVendor\Doctrine\ORM\Id; if (!defined('ABSPATH')) exit; use MailPoetVendor\Doctrine\ORM\EntityManager; use Serializable; use function serialize; use function unserialize; class SequenceGenerator extends AbstractIdGenerator implements Serializable { private $_allocationSize; private $_sequenceName; private $_nextValue = 0; private $_maxValue = null; public function __construct($sequenceName, $allocationSize) { $this->_sequenceName = $sequenceName; $this->_allocationSize = $allocationSize; } public function generate(EntityManager $em, $entity) { if ($this->_maxValue === null || $this->_nextValue === $this->_maxValue) { $conn = $em->getConnection(); $sql = $conn->getDatabasePlatform()->getSequenceNextValSQL($this->_sequenceName); $this->_nextValue = (int) $conn->executeQuery($sql)->fetchOne(); $this->_maxValue = $this->_nextValue + $this->_allocationSize; } return $this->_nextValue++; } public function getCurrentMaxValue() { return $this->_maxValue; } public function getNextValue() { return $this->_nextValue; } public function serialize() { return serialize($this->__serialize()); } public function __serialize() : array { return ['allocationSize' => $this->_allocationSize, 'sequenceName' => $this->_sequenceName]; } public function unserialize($serialized) { $this->__unserialize(unserialize($serialized)); } public function __unserialize(array $data) : void { $this->_sequenceName = $data['sequenceName']; $this->_allocationSize = $data['allocationSize']; } } 