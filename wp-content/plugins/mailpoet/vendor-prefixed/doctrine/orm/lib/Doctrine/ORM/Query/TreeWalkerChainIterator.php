<?php
 declare (strict_types=1); namespace MailPoetVendor\Doctrine\ORM\Query; if (!defined('ABSPATH')) exit; use ArrayAccess; use MailPoetVendor\Doctrine\ORM\AbstractQuery; use Iterator; use MailPoetVendor\ReturnTypeWillChange; use function key; use function next; use function reset; class TreeWalkerChainIterator implements Iterator, ArrayAccess { private $walkers = []; private $treeWalkerChain; private $query; private $parserResult; public function __construct(TreeWalkerChain $treeWalkerChain, $query, $parserResult) { $this->treeWalkerChain = $treeWalkerChain; $this->query = $query; $this->parserResult = $parserResult; } public function rewind() { return reset($this->walkers); } public function current() { return $this->offsetGet(key($this->walkers)); } public function key() { return key($this->walkers); } public function next() { next($this->walkers); return $this->offsetGet(key($this->walkers)); } public function valid() { return key($this->walkers) !== null; } public function offsetExists($offset) { return isset($this->walkers[$offset ?? '']); } public function offsetGet($offset) { if ($this->offsetExists($offset)) { return new $this->walkers[$offset]($this->query, $this->parserResult, $this->treeWalkerChain->getQueryComponents()); } return null; } public function offsetSet($offset, $value) { if ($offset === null) { $this->walkers[] = $value; } else { $this->walkers[$offset] = $value; } } public function offsetUnset($offset) { if ($this->offsetExists($offset)) { unset($this->walkers[$offset ?? '']); } } } 