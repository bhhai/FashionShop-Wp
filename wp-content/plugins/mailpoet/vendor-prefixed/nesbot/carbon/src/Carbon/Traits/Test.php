<?php
 namespace MailPoetVendor\Carbon\Traits; if (!defined('ABSPATH')) exit; use Closure; use DateTimeImmutable; trait Test { protected static $testNow; public static function setTestNow($testNow = null) { if ($testNow === \false) { $testNow = null; } static::$testNow = \is_string($testNow) ? static::parse($testNow) : $testNow; } public static function withTestNow($testNow = null, $callback = null) { static::setTestNow($testNow); $result = $callback(); static::setTestNow(); return $result; } public static function getTestNow() { return static::$testNow; } public static function hasTestNow() { return static::getTestNow() !== null; } protected static function handleMockTimezone($tz, &$testInstance) { if ($tz !== null && $tz !== static::getMockedTestNow($tz)->getTimezone()) { $testInstance = $testInstance->setTimezone($tz); return $tz; } return $testInstance->getTimezone(); } protected static function getMockedTestNow($tz) { $testNow = static::getTestNow(); if ($testNow instanceof Closure) { $realNow = new DateTimeImmutable('now'); $testNow = $testNow(static::parse($realNow->format('Y-m-d H:i:s.u'), $tz ?: $realNow->getTimezone())); } return $testNow; } protected static function mockConstructorParameters(&$time, &$tz) { $testInstance = clone static::getMockedTestNow($tz); $tz = static::handleMockTimezone($tz, $testInstance); if (static::hasRelativeKeywords($time)) { $testInstance = $testInstance->modify($time); } $time = $testInstance instanceof self ? $testInstance->rawFormat(static::MOCK_DATETIME_FORMAT) : $testInstance->format(static::MOCK_DATETIME_FORMAT); } } 