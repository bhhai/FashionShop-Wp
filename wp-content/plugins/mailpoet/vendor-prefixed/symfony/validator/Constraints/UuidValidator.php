<?php
 namespace MailPoetVendor\Symfony\Component\Validator\Constraints; if (!defined('ABSPATH')) exit; use MailPoetVendor\Symfony\Component\Validator\Constraint; use MailPoetVendor\Symfony\Component\Validator\ConstraintValidator; use MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedTypeException; use MailPoetVendor\Symfony\Component\Validator\Exception\UnexpectedValueException; class UuidValidator extends ConstraintValidator { public const STRICT_LENGTH = 36; public const STRICT_FIRST_HYPHEN_POSITION = 8; public const STRICT_LAST_HYPHEN_POSITION = 23; public const STRICT_VERSION_POSITION = 14; public const STRICT_VARIANT_POSITION = 19; public const LOOSE_MAX_LENGTH = 39; public const LOOSE_FIRST_HYPHEN_POSITION = 4; public function validate($value, Constraint $constraint) { if (!$constraint instanceof Uuid) { throw new UnexpectedTypeException($constraint, Uuid::class); } if (null === $value || '' === $value) { return; } if (!\is_scalar($value) && !(\is_object($value) && \method_exists($value, '__toString'))) { throw new UnexpectedValueException($value, 'string'); } $value = (string) $value; if (null !== $constraint->normalizer) { $value = ($constraint->normalizer)($value); } if ($constraint->strict) { $this->validateStrict($value, $constraint); return; } $this->validateLoose($value, $constraint); } private function validateLoose(string $value, Uuid $constraint) { $trimmed = \trim($value, '[]{}'); $h = self::LOOSE_FIRST_HYPHEN_POSITION; $l = self::LOOSE_MAX_LENGTH; for ($i = 0; $i < $l; ++$i) { if (!isset($trimmed[$i])) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::TOO_SHORT_ERROR)->addViolation(); return; } if ('-' === $trimmed[$i]) { if ($i !== $h) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::INVALID_HYPHEN_PLACEMENT_ERROR)->addViolation(); return; } $h += 5; continue; } if ($i === $h) { $h += 4; --$l; } if (!\ctype_xdigit($trimmed[$i])) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::INVALID_CHARACTERS_ERROR)->addViolation(); return; } } if (isset($trimmed[$i])) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::TOO_LONG_ERROR)->addViolation(); } } private function validateStrict(string $value, Uuid $constraint) { $h = self::STRICT_FIRST_HYPHEN_POSITION; for ($i = 0; $i < self::STRICT_LENGTH; ++$i) { if (!isset($value[$i])) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::TOO_SHORT_ERROR)->addViolation(); return; } if ('-' === $value[$i]) { if ($i !== $h) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::INVALID_HYPHEN_PLACEMENT_ERROR)->addViolation(); return; } if ($h < self::STRICT_LAST_HYPHEN_POSITION) { $h += 5; } continue; } if (!\ctype_xdigit($value[$i])) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::INVALID_CHARACTERS_ERROR)->addViolation(); return; } if ($i === $h) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::INVALID_HYPHEN_PLACEMENT_ERROR)->addViolation(); return; } } if (isset($value[$i])) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::TOO_LONG_ERROR)->addViolation(); } if (!\in_array($value[self::STRICT_VERSION_POSITION], $constraint->versions)) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::INVALID_VERSION_ERROR)->addViolation(); } if (8 !== (\hexdec($value[self::STRICT_VARIANT_POSITION]) & 12)) { $this->context->buildViolation($constraint->message)->setParameter('{{ value }}', $this->formatValue($value))->setCode(Uuid::INVALID_VARIANT_ERROR)->addViolation(); } } } 